import { run } from '../src/utils.ts'
import { Select } from 'cliffy/prompt/mod.ts'
import * as semver from 'semver/mod.ts'
import { join } from 'path/mod.ts'
import { config } from './utils.ts'

const inc = (type: semver.ReleaseType) => semver.inc(config.version, type)

const types: semver.ReleaseType[] = ['patch', 'minor', 'major']

const options = types.map((type) => ({
  name: `${type}(${inc(type)})`,
  value: type,
}))

await run('x', 'run', 'test')

const releaseType = (await Select.prompt({
  message: 'Please select release type',
  options: options,
})) as semver.ReleaseType

const releaseVersion = inc(releaseType)

if (!releaseVersion) {
  Deno.exit()
}

await Deno.writeTextFile(
  'version.ts',
  `// Do not edit this file directly.
// This file is Auto generate by scripts/release.ts

export const version = '${releaseVersion}'
`,
)

await run('git', 'add', 'version.ts')

await modifyPackageVersion(releaseVersion)
await run('git', 'add', 'package.json')

await run('git', 'commit', '-m', `chore: release ${releaseVersion}`)
await run('git', 'tag', `v${releaseVersion}`)

await run('git', 'push')
await run('git', 'push', '--tags')

async function modifyPackageVersion(version: string) {
  const pkgPath = join(Deno.cwd(), 'package.json')

  const content = await Deno.readTextFile(pkgPath)
  const json = JSON.parse(content)

  json.version = version
  await Deno.writeTextFile(pkgPath, JSON.stringify(json, null, 2))
}
