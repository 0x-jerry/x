import { Command, HelpCommand } from 'cliffy/command/mod.ts'
import { join } from 'path/mod.ts'
import { Select } from 'cliffy/prompt/select.ts'
import { run } from '../utils.ts'
import * as semver from 'semver/mod.ts'

const pkgPath = join(Deno.cwd(), 'package.json')

interface ReleaseCommandOption {
  deno: boolean
  patch: boolean
  minor: boolean
  major: boolean
}

export const releaseCommand = new Command()
  .description('Create a new release for deno project.')
  .option('-d, --deno', 'A deno project.')
  .option('--patch', 'Create a path release.')
  .option('--minor', 'Create a minor release.')
  .option('--major', 'Create a major release.')
  .default('help')
  .command('help', new HelpCommand())
  .action(async (opt: ReleaseCommandOption) => {
    const pkgConf = await getPkgConfig<IConfig>()

    const nextType = opt.major
      ? 'major'
      : opt.minor
      ? 'minor'
      : opt.patch
      ? 'patch'
      : undefined

    const releaseVersion = await getNextVersion(pkgConf, nextType)

    if (!releaseVersion) {
      Deno.exit()
    }

    if (pkgConf.scripts?.test) {
      await run('x', 'run', 'test')
    }

    if (opt.deno) {
      // write version to version.ts
      await writeVersionFile(releaseVersion)
      await run('git', 'add', 'version.ts')
    }

    // change package.json
    await modifyPackageVersion(releaseVersion)
    await run('git', 'add', 'package.json')

    // commit
    await run('git', 'commit', '-m', `chore: release ${releaseVersion}`)
    await run('git', 'tag', `v${releaseVersion}`)

    // push
    await run('git', 'push')
    await run('git', 'push', '--tags')

    // --------

    async function modifyPackageVersion(version: string) {
      pkgConf.version = version

      await Deno.writeTextFile(pkgPath, JSON.stringify(pkgConf, null, 2))
    }

    async function getPkgConfig<T>(): Promise<T> {
      const fileContent = await Deno.readTextFile(pkgPath)

      return JSON.parse(fileContent)
    }
  })

interface IConfig {
  version: string
  scripts?: Record<string, string>
}

async function getNextVersion(
  pkgConf: IConfig,
  specifiedReleaseType?: semver.ReleaseType,
) {
  const inc = (type: semver.ReleaseType) => semver.inc(pkgConf.version, type)

  if (specifiedReleaseType) {
    return inc(specifiedReleaseType)
  }

  const types: semver.ReleaseType[] = ['patch', 'minor', 'major']

  const options = types.map((type) => ({
    name: `${type}(${inc(type)})`,
    value: type,
  }))

  const releaseType = (await Select.prompt({
    message: 'Please select release type',
    options: options,
  })) as semver.ReleaseType

  const releaseVersion = inc(releaseType)
  return releaseVersion
}

async function writeVersionFile(releaseVersion: string) {
  await Deno.writeTextFile(
    'version.ts',
    `// Do not edit this file directly.
// This file is Auto generate by https://github.com/0x-jerry/x
  
export const version = '${releaseVersion}'
`,
  )
}
