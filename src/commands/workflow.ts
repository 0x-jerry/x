import { Command, HelpCommand } from 'cliffy/command/mod.ts'
import { join } from 'path/mod.ts'
import { Select } from 'cliffy/prompt/select.ts'
import { run } from '../utils.ts'
import * as semver from 'semver/mod.ts'

export const workflowCommand = new Command()
  .description('Workflow for development.')
  .default('help')
  .command('help', new HelpCommand())
  //
  .command('build', 'Build current branch and push to remote.')
  .action(async () => {
    await run('yarn', 'build')
    await run('git', 'add', '.')
    await run('git', 'commit', '-m', 'chore: build')
    await run('git', 'push')
  })
  .command('release', 'Create a new release for deno project.')
  .action(async () => {
    const pkgPath = join(Deno.cwd(), 'package.json')

    const pkgConf = await getPkgConfig<IConfig>()

    const inc = (type: semver.ReleaseType) => semver.inc(pkgConf.version, type)

    const types: semver.ReleaseType[] = ['patch', 'minor', 'major']

    const options = types.map((type) => ({
      name: `${type}(${inc(type)})`,
      value: type,
    }))

    const releaseType = (await Select.prompt({
      message: 'Please select release type',
      options: options,
    })) as semver.ReleaseType

    const releaseVersion = inc(releaseType)

    if (!releaseVersion) {
      Deno.exit()
    }

    if (pkgConf.scripts?.test) {
      await run('x', 'run', 'test')
    }

    await Deno.writeTextFile(
      'version.ts',
      `// Do not edit this file directly.
    // This file is Auto generate by scripts/release.ts
    
    export const version = '${releaseVersion}'
    `,
    )

    await modifyPackageVersion(releaseVersion)

    await run('git', 'add', 'version.ts')
    await run('git', 'add', 'package.json')

    await run('git', 'commit', '-m', `chore: release ${releaseVersion}`)
    await run('git', 'tag', `v${releaseVersion}`)

    await run('git', 'push')
    await run('git', 'push', '--tags')

    // --------

    async function modifyPackageVersion(version: string) {
      pkgConf.version = version

      await Deno.writeTextFile(pkgPath, JSON.stringify(pkgConf, null, 2))
    }

    async function getPkgConfig<T>(): Promise<T> {
      const fileContent = await Deno.readTextFile(pkgPath)

      return JSON.parse(fileContent)
    }

    interface IConfig {
      version: string
      scripts?: Record<string, string>
    }
  })
